{"version":3,"file":"74.js","mappings":"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","sources":["./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","/**\n * @license Angular v17.3.12\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: value => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable(observer => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe(v => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](/guide/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"names":["Subject","dateTimestampProvider","ReplaySubject","constructor","_bufferSize","Infinity","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","max","next","value","isStopped","push","now","_trimBuffer","_subscribe","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","length","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","assertInInjectionContext","inject","DestroyRef","ɵRuntimeError","ɵgetOutputDestroyRef","Injector","effect","untracked","assertNotInReactiveContext","signal","computed","Observable","takeUntil","takeUntilDestroyed","destroyRef","destroyed$","observer","unregisterFn","onDestroy","bind","source","pipe","OutputFromObservableRef","destroyed","subscribe","callbackFn","ngDevMode","unsubscribe","outputFromObservable","observable","opts","outputToObservable","ref","complete","v","toObservable","options","injector","subject","watcher","err","error","manualCleanup","get","destroy","asObservable","toSignal","requiresCleanup","cleanupRef","state","requireSync","kind","initialValue","sub","set","rejectErrors","current"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}