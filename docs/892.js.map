{"version":3,"file":"892.js","mappings":"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","sources":["./src/app/feature/filters/ui/filters-page.component.ts","./src/app/feature/filters/ui/filters-page.component.html","./src/app/shared/ui/tag-list/tag-list.component.ts","./src/app/shared/ui/tag-list/tag-list.component.html","./src/app/feature/filters/data-access/filters.facade.ts","./src/app/shared/ui/filter-group/filter-group.component.ts","./src/app/shared/ui/filter-group/filter-group.component.html"],"sourcesContent":["import { AsyncPipe, NgFor, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, inject } from '@angular/core';\n\nimport { DoctorCardComponent } from '../../../shared/ui/doctor-card/doctor-card.component';\nimport { FilterGroupComponent } from '../../../shared/ui/filter-group/filter-group.component';\nimport { SectionHeaderComponent } from '../../../shared/ui/section-header/section-header.component';\nimport { TagListComponent } from '../../../shared/ui/tag-list/tag-list.component';\nimport { FilterGroup } from '../../../shared/data-access/models/filter.model';\nimport { FiltersFacade } from '../data-access/filters.facade';\n\n@Component({\n    selector: 'dr-filters-page',\n    standalone: true,\n    imports: [AsyncPipe, NgFor, NgIf, SectionHeaderComponent, FilterGroupComponent, TagListComponent, DoctorCardComponent],\n    templateUrl: './filters-page.component.html',\n    styleUrls: ['./filters-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FiltersPageComponent {\n  private readonly facade = inject(FiltersFacade);\n\n  readonly filters$ = this.facade.filters$;\n  readonly selections = this.facade.selectionsSignal;\n  readonly filteredResults$ = this.facade.filteredResults$;\n  readonly activeFilters = this.facade.activeFilterCount;\n  readonly hasActiveFilters = computed(() => this.activeFilters() > 0);\n  readonly selectedTags = computed(() =>\n    Object.values(this.selections()).flatMap((values) => values ?? [])\n  );\n\n  onToggle(group: FilterGroup, value: string): void {\n    this.facade.toggleOption(group, value);\n  }\n\n  clearGroup(groupId: string): void {\n    this.facade.clearGroup(groupId);\n  }\n\n  resetAll(): void {\n    this.facade.resetAll();\n  }\n\n  selectionForGroup(groupId: string): string[] {\n    return this.selections()[groupId] ?? [];\n  }\n}\n","<section class=\"filters-hero section\">\n  <div class=\"container\">\n    <dr-section-header\n      title=\"Design smart filters\"\n      subtitle=\"Combine access modes, availability and language support to build reusable filter presets for DocRoster.\"\n      badge=\"Configurator\"\n    >\n      <div actions class=\"filters-hero__actions\">\n        <button class=\"button\" type=\"button\" (click)=\"resetAll()\">Clear all</button>\n      </div>\n    </dr-section-header>\n\n    <div class=\"filters-hero__selected\" *ngIf=\"hasActiveFilters()\">\n      <span>Active filters</span>\n      <dr-tag-list [tags]=\"selectedTags()\"></dr-tag-list>\n    </div>\n  </div>\n</section>\n\n<section class=\"filters-layout container\">\n  <div class=\"filters-layout__groups\" *ngIf=\"filters$ | async as groups\">\n    <ng-container *ngFor=\"let group of groups\">\n      <div class=\"filters-layout__group\">\n        <dr-filter-group\n          [group]=\"group\"\n          [selected]=\"selectionForGroup(group.id)\"\n          (toggled)=\"onToggle(group, $event)\"\n        ></dr-filter-group>\n        <button\n          class=\"filters-layout__clear\"\n          type=\"button\"\n          *ngIf=\"selectionForGroup(group.id).length\"\n          (click)=\"clearGroup(group.id)\"\n        >\n          Clear {{ group.title.toLowerCase() }}\n        </button>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"filters-layout__results\" *ngIf=\"filteredResults$ | async as results\">\n    <h3>Preview results</h3>\n    <p>Showing {{ results.length }} matches across the pilot network.</p>\n    <dr-doctor-card\n      *ngFor=\"let result of results\"\n      [doctor]=\"result.doctor\"\n      [clinic]=\"result.clinic\"\n      [nextAvailable]=\"result.nextAvailable\"\n      [highlightDistance]=\"result.distanceInMinutes\"\n    ></dr-doctor-card>\n  </div>\n</section>\n","import { NgFor } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'dr-tag-list',\n    standalone: true,\n    imports: [NgFor],\n    templateUrl: './tag-list.component.html',\n    styleUrls: ['./tag-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TagListComponent {\n  @Input() tags: string[] = [];\n}\n","<ul class=\"tag-list\">\n  <li *ngFor=\"let tag of tags\">{{ tag }}</li>\n</ul>\n","import { Injectable, computed, inject, signal } from '@angular/core';\nimport { toObservable } from '@angular/core/rxjs-interop';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DocRosterApiService } from '../../../data-access/doc-roster-api.service';\nimport { FilterGroup } from '../../../shared/data-access/models/filter.model';\nimport { SearchResult } from '../../../shared/data-access/models/search-result.model';\n\ntype FilterSelections = Record<string, string[]>;\n\ntype FilterPredicate = (result: SearchResult) => boolean;\n\nconst FILTER_PREDICATES: Record<string, FilterPredicate> = {\n  virtual: (result) => result.doctor.virtualCare,\n  multilingual: (result) => result.doctor.languages.length > 1,\n  evening: (result) => result.doctor.availability.some((slot) => slot.times.some((time) => parseInt(time.split(':')[0], 10) >= 17)),\n  weekend: (result) => result.doctor.availability.some((slot) => ['Saturday', 'Sunday'].includes(slot.day)),\n  transit: () => true,\n  hybrid: () => true,\n  inperson: () => true,\n  hmo: (result) => result.doctor.acceptedPlans.includes('hmo'),\n  ppo: (result) => result.doctor.acceptedPlans.includes('ppo'),\n  direct: (result) => result.doctor.acceptedPlans.includes('direct')\n};\n\n@Injectable({ providedIn: 'root' })\nexport class FiltersFacade {\n  private readonly api = inject(DocRosterApiService);\n  private readonly selections = signal<FilterSelections>({});\n\n  readonly filters$: Observable<FilterGroup[]> = this.api.getFilters();\n  readonly selectionsSignal = computed(() => this.selections());\n  private readonly selections$ = toObservable(this.selectionsSignal);\n\n  readonly activeFilterCount = computed(() =>\n    Object.values(this.selections()).reduce((total, values) => total + values.length, 0)\n  );\n\n  readonly filteredResults$: Observable<SearchResult[]> = combineLatest([\n    this.api.getSearchResults(),\n    this.selections$,\n    this.filters$\n  ]).pipe(\n    map(([results, selections, groups]) => {\n      if (!Object.keys(selections).length) {\n        return results;\n      }\n      return results.filter((result) =>\n        Object.entries(selections).every(([groupId, values]) => {\n          if (!values.length) {\n            return true;\n          }\n          const group = groups.find((g) => g.id === groupId);\n          if (!group) {\n            return true;\n          }\n          return values.every((value) => {\n            const predicate = FILTER_PREDICATES[value];\n            return predicate ? predicate(result) : true;\n          });\n        })\n      );\n    })\n  );\n\n  toggleOption(group: FilterGroup, optionValue: string): void {\n    const current = { ...this.selections() };\n    const currentValues = current[group.id] ?? [];\n\n    if (group.type === 'single') {\n      current[group.id] = currentValues[0] === optionValue ? [] : [optionValue];\n    } else {\n      const nextValues = currentValues.includes(optionValue)\n        ? currentValues.filter((value) => value !== optionValue)\n        : [...currentValues, optionValue];\n      current[group.id] = nextValues;\n    }\n\n    this.selections.set(current);\n  }\n\n  clearGroup(groupId: string): void {\n    if (!this.selections()[groupId]) {\n      return;\n    }\n    const next = { ...this.selections() };\n    delete next[groupId];\n    this.selections.set(next);\n  }\n\n  resetAll(): void {\n    this.selections.set({});\n  }\n}\n","import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { FilterGroup } from '../../data-access/models/filter.model';\n\n@Component({\n    selector: 'dr-filter-group',\n    standalone: true,\n    imports: [NgFor, NgClass, NgIf],\n    templateUrl: './filter-group.component.html',\n    styleUrls: ['./filter-group.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FilterGroupComponent {\n  @Input({ required: true }) group!: FilterGroup;\n  @Input() selected: string[] = [];\n  @Output() toggled = new EventEmitter<string>();\n\n  onToggle(value: string): void {\n    this.toggled.emit(value);\n  }\n\n  isActive(value: string): boolean {\n    return this.selected.includes(value);\n  }\n}\n","<section class=\"filter-group\">\n  <header>\n    <h3>{{ group.title }}</h3>\n    <p *ngIf=\"group.description\">{{ group.description }}</p>\n  </header>\n  <div class=\"filter-group__options\">\n    <button\n      type=\"button\"\n      *ngFor=\"let option of group.options\"\n      (click)=\"onToggle(option.value)\"\n      [ngClass]=\"{ 'filter-group__option--active': isActive(option.value) }\"\n      class=\"filter-group__option\"\n    >\n      <span *ngIf=\"option.icon\" class=\"material-symbols-rounded\">{{ option.icon }}</span>\n      {{ option.label }}\n    </button>\n  </div>\n</section>\n"],"names":["AsyncPipe","NgFor","NgIf","computed","inject","DoctorCardComponent","FilterGroupComponent","SectionHeaderComponent","TagListComponent","FiltersFacade","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r0","selectedTags","ɵɵlistener","FiltersPageComponent_div_8_ng_container_1_button_3_Template_button_click_0_listener","ɵɵrestoreView","_r4","group_r3","ɵɵnextContext","$implicit","ɵɵresetView","clearGroup","id","ɵɵtextInterpolate1","title","toLowerCase","ɵɵelementContainerStart","FiltersPageComponent_div_8_ng_container_1_Template_dr_filter_group_toggled_2_listener","$event","_r2","onToggle","ɵɵtemplate","FiltersPageComponent_div_8_ng_container_1_button_3_Template","selectionForGroup","length","FiltersPageComponent_div_8_ng_container_1_Template","groups_r5","result_r6","doctor","clinic","nextAvailable","distanceInMinutes","FiltersPageComponent_div_10_dr_doctor_card_5_Template","results_r7","FiltersPageComponent","constructor","facade","filters$","selections","selectionsSignal","filteredResults$","activeFilters","activeFilterCount","hasActiveFilters","ngDevMode","debugName","Object","values","flatMap","group","value","toggleOption","groupId","resetAll","_","_staticBlock","selectors","decls","vars","consts","template","FiltersPageComponent_Template","rf","ctx","FiltersPageComponent_Template_button_click_4_listener","FiltersPageComponent_div_6_Template","FiltersPageComponent_div_8_Template","FiltersPageComponent_div_10_Template","ɵɵpipeBind1","styles","changeDetection","ɵɵtextInterpolate","tag_r1","tags","inputs","TagListComponent_Template","TagListComponent_li_1_Template","signal","toObservable","combineLatest","map","DocRosterApiService","FILTER_PREDICATES","virtual","result","virtualCare","multilingual","languages","evening","availability","some","slot","times","time","parseInt","split","weekend","includes","day","transit","hybrid","inperson","hmo","acceptedPlans","ppo","direct","api","getFilters","selections$","reduce","total","getSearchResults","pipe","results","groups","keys","filter","entries","every","find","g","predicate","optionValue","current","currentValues","type","nextValues","set","next","factory","ɵfac","providedIn","NgClass","EventEmitter","description","option_r3","icon","FilterGroupComponent_button_6_Template_button_click_0_listener","FilterGroupComponent_button_6_span_1_Template","ɵɵpureFunction1","_c0","isActive","label","selected","toggled","emit","outputs","FilterGroupComponent_Template","FilterGroupComponent_p_4_Template","FilterGroupComponent_button_6_Template","options"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}